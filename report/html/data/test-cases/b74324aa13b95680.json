{
  "uid" : "b74324aa13b95680",
  "name" : "test_api[case_data9]",
  "fullName" : "case.test_purchase_order.TestCase#test_api",
  "historyId" : "9757738eeae4be95930c78a2418a1463",
  "time" : {
    "start" : 1589362367739,
    "stop" : 1589362372214,
    "duration" : 4475
  },
  "description" : "\n        :param case_data: 单条测试用例数据\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    :param case_data: 单条测试用例数据\n    :return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: the JSON object must be str, bytes or bytearray, not 'dict'",
  "statusTrace" : "self = <case.test_purchase_order.TestCase object at 0x110837320>\ncase_data = {'APIName': '删除供应商直发外部采购订单-普通仓', 'CaseId': 10, 'CaseName': 'delete_purchase_order', 'CheckTpye': 'only_check_status', ...}\n\n    @pytest.mark.parametrize('case_data', case_dict, ids=[])\n    @allure.story(\"采购订单模块测试\")\n    @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_api(self, case_data):\n        '''\n        :param case_data: 单条测试用例数据\n        :return:\n        '''\n>       code, response = h.send_requests(case_data)\n\ntest_purchase_order.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../util/httpClient.py:53: in send_requests\n    parameter = self.init_request(depend_case, relevance, parameter)\n../util/httpClient.py:159: in init_request\n    relevance_dict = json.loads(relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = {'ids': '$..id'}, encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n    \n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError('the JSON object must be str, bytes or bytearray, '\n>                               'not {!r}'.format(s.__class__.__name__))\nE               TypeError: the JSON object must be str, bytes or bytearray, not 'dict'\n\n/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/json/__init__.py:348: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n        :param case_data: 单条测试用例数据\n        :return:\n        ",
    "status" : "broken",
    "statusMessage" : "TypeError: the JSON object must be str, bytes or bytearray, not 'dict'",
    "statusTrace" : "self = <case.test_purchase_order.TestCase object at 0x110837320>\ncase_data = {'APIName': '删除供应商直发外部采购订单-普通仓', 'CaseId': 10, 'CaseName': 'delete_purchase_order', 'CheckTpye': 'only_check_status', ...}\n\n    @pytest.mark.parametrize('case_data', case_dict, ids=[])\n    @allure.story(\"采购订单模块测试\")\n    @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_api(self, case_data):\n        '''\n        :param case_data: 单条测试用例数据\n        :return:\n        '''\n>       code, response = h.send_requests(case_data)\n\ntest_purchase_order.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../util/httpClient.py:53: in send_requests\n    parameter = self.init_request(depend_case, relevance, parameter)\n../util/httpClient.py:159: in init_request\n    relevance_dict = json.loads(relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = {'ids': '$..id'}, encoding = None, cls = None, object_hook = None\nparse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders that rely on the\n        order that the key and value pairs are decoded (for example,\n        collections.OrderedDict will remember the order of insertion). If\n        ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n    \n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError('the JSON object must be str, bytes or bytearray, '\n>                               'not {!r}'.format(s.__class__.__name__))\nE               TypeError: the JSON object must be str, bytes or bytearray, not 'dict'\n\n/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/json/__init__.py:348: TypeError",
    "steps" : [ {
      "name" : "开始请求接口",
      "time" : {
        "start" : 1589362367788,
        "stop" : 1589362367791,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d8076831d9f034d3",
        "name" : "请求类型",
        "source" : "d8076831d9f034d3.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "8efe6991b9e26586",
        "name" : "用例名称:",
        "source" : "8efe6991b9e26586.attach",
        "type" : "text/plain",
        "size" : 30
      }, {
        "uid" : "d1dc016512496541",
        "name" : "请求地址:",
        "source" : "d1dc016512496541.attach",
        "type" : "text/plain",
        "size" : 49
      }, {
        "uid" : "8a0a176ad9e01aa8",
        "name" : "请求头",
        "source" : "8a0a176ad9e01aa8.attach",
        "type" : "text/plain",
        "size" : 56
      }, {
        "uid" : "7b4ace65fe553deb",
        "name" : "请求参数类型",
        "source" : "7b4ace65fe553deb.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "c09214c692e90dc",
        "name" : "请求参数",
        "source" : "c09214c692e90dc.attach",
        "type" : "text/plain",
        "size" : 11008
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 6,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "78f3574b0738961f",
      "name" : "log",
      "source" : "78f3574b0738961f.txt",
      "type" : "text/plain",
      "size" : 38463
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 7,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "采购订单模块测试"
  }, {
    "name" : "feature",
    "value" : "渠道云接口自动化测试"
  }, {
    "name" : "parentSuite",
    "value" : "case"
  }, {
    "name" : "suite",
    "value" : "test_purchase_order"
  }, {
    "name" : "subSuite",
    "value" : "TestCase"
  }, {
    "name" : "host",
    "value" : "xmlydeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "50315-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.test_purchase_order"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'CaseId': 10, 'CaseName': 'delete_purchase_order', 'APIName': '删除供应商直发外部采购订单-普通仓', 'Headers': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'UTF-8'}, 'Path': '/occ-purchase/purchase/orders/delete', 'Method': 'post', 'ParameterType': 'form_data', 'Params': {'ids': '0iKWS45FRTo2Lmf8zrkb', 'search_AUTH_APPCODE': 'purchasecenterorderout'}, 'CheckTpye': 'only_check_status', 'ExpectedCode': 200, 'ExpectedData': '', 'User': 'Manager', 'DependCase': 'create_supplier_purchase_order', 'RelevanceList': {'ids': '$..id'}}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "b74324aa13b95680.json",
  "parameterValues" : [ "{'CaseId': 10, 'CaseName': 'delete_purchase_order', 'APIName': '删除供应商直发外部采购订单-普通仓', 'Headers': {'Content-Type': 'application/x-www-form-urlencoded', 'charset': 'UTF-8'}, 'Path': '/occ-purchase/purchase/orders/delete', 'Method': 'post', 'ParameterType': 'form_data', 'Params': {'ids': '0iKWS45FRTo2Lmf8zrkb', 'search_AUTH_APPCODE': 'purchasecenterorderout'}, 'CheckTpye': 'only_check_status', 'ExpectedCode': 200, 'ExpectedData': '', 'User': 'Manager', 'DependCase': 'create_supplier_purchase_order', 'RelevanceList': {'ids': '$..id'}}" ]
}